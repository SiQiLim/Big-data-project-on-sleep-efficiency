[
  {
    "objectID": "Big data project on Sleep efficiency.html",
    "href": "Big data project on Sleep efficiency.html",
    "title": "Predicting Sleep efficiency",
    "section": "",
    "text": "1. Introduction\nSleep is key to maintaining a healthy lifestyle. However, it is often overlooked in today’s fast paced world. Sleep efficiency plays a crucial role in insomnia research and it is a commonly used metric to assess sleep quality. By using this sleep efficiency dataset from Morocco, we aim to explore the factors influencing sleep efficiency in a different cultural and geographical context. Understanding the dynamics of sleep patterns and efficiency in Morocco can provide valuable insights into the broader issue of sleep deprivation and its impact on individuals and societies.\nWhile it is true that Singapore is often associated with its competitive nature and struggles with sleep, it is crucial to acknowledge that such issues are not unique to Singapore. Morocco, like many other nations, faces its own unique challenges when it comes to sleep patterns and efficiency. By examining sleep efficiency in Morocco, this project will contribute to the broader conversation about sleep health and its implications, ultimately helping to spur data-driven solutions that can improve sleep patterns and overall well-being on a global scale. Through this project, we aim to predict sleep efficiency based on various factors like age, sleep patterns, and lifestyle choices using a multiple linear regression model.\nDataset\nOur dataset is sourced from Kaggle. The variables include ID, Age, Gender, Bedtime, Wakeuptime, Sleep duration, Sleep efficiency, REM sleep percentage, Deep Sleep percentage, Light sleep percentage, Awakenings, Caffeine consumption, Alcohol consumption, Smoking status and Exercise frequency. The understanding and data type of each variable is further explained in our codebook.\nConnection to Spark\nWe initiated a connection to a local Spark cluster and read our Sleep_efficiency.csv file into a Spark DataFrame by employing spark_read_csv(). After which, we saved and read our Parquet file using the spark_write_parquet() and spark_read_parquet() functions. We chose the Apache Parquet format as it allows for efficient data storage and retrieval especially when handling large datasets.\n\nlibrary(arrow);library(sparklyr);library(dplyr);library(ggplot2);library(dbplot);library(corrr);library(doParallel);library(plotly);library(plumber)\n\n\nAttaching package: 'arrow'\n\n\nThe following object is masked from 'package:utils':\n\n    timestamp\n\n\n\nAttaching package: 'sparklyr'\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nLoading required package: foreach\n\n\nLoading required package: iterators\n\n\nLoading required package: parallel\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:arrow':\n\n    schema\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\nsc &lt;- spark_connect(master = \"local\", version = \"3.4.0\")\nsleep_csv &lt;- spark_read_csv(sc,\n                        name = \"Sleep\",\n                        path = paste0(\"file://\", getwd(), \"/Sleep_Efficiency.csv\"))\n\nparquet_path &lt;- \"Sleep_parquet\"\nspark_write_parquet(sleep_csv, path = parquet_path, mode=\"overwrite\")\nsleep &lt;- spark_read_parquet(sc, path = parquet_path)\n\nData Cleaning\nWe start off our analysis with data cleaning, first removing rows with nulls, then the ID variable, as they are not needed in our analysis. We then changed smoking_status and gender to binary integer variables instead of categorical variables, changed awakenings to integer, and converted Bedtime and Wakeup_time to hour format. This brings us to 386 observations of 14 variables in our final sleep_clean dataset.\n\nsleep_clean &lt;- sleep |&gt;\n               filter_all(all_vars(!is.na(.)))|&gt;\n               select(-ID) |&gt;\n               mutate(Smoking_status = as.integer(ifelse(Smoking_status == \"Yes\", 1, 0)),\n                      Awakenings = as.integer(Awakenings),\n                      Gender = as.integer(ifelse(Gender == \"Female\", 1, 0)),\n                      Bedtime = (hour(Bedtime)),\n                      Wakeup_time = (hour(Wakeup_time)))\nglimpse(sleep_clean)\n\nRows: ??\n\n\nWarning in arrow_collect(object, ...): NAs introduced by coercion to integer\nrange\n\n\nColumns: 14\nDatabase: spark_connection\n$ Age                    &lt;int&gt; 65, 69, 40, 40, 57, 27, 53, 41, 11, 50, 55, 30,…\n$ Gender                 &lt;int&gt; 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1,…\n$ Bedtime                &lt;int&gt; 1, 2, 21, 2, 1, 21, 0, 2, 1, 0, 22, 2, 1, 1, 22…\n$ Wakeup_time            &lt;int&gt; 7, 9, 5, 8, 9, 3, 10, 8, 10, 8, 6, 11, 9, 10, 5…\n$ Sleep_duration         &lt;dbl&gt; 6.0, 7.0, 8.0, 6.0, 8.0, 6.0, 10.0, 6.0, 9.0, 8…\n$ Sleep_efficiency       &lt;dbl&gt; 0.88, 0.66, 0.89, 0.51, 0.76, 0.54, 0.90, 0.79,…\n$ REM_sleep_percentage   &lt;int&gt; 18, 24, 20, 28, 27, 28, 28, 28, 18, 28, 18, 24,…\n$ Deep_sleep_percentage  &lt;int&gt; 70, 28, 70, 25, 55, 25, 57, 60, 35, 57, 60, 63,…\n$ Light_sleep_percentage &lt;int&gt; 10, 53, 10, 52, 18, 52, 20, 17, 45, 20, 22, 18,…\n$ Awakenings             &lt;int&gt; 0, 3, 1, 3, 3, 2, 0, 3, 4, 1, 0, 0, 4, 2, 0, 4,…\n$ Caffeine_consumption   &lt;dbl&gt; 0, 0, 0, 50, 0, 50, 50, 50, 0, 50, 0, 50, 0, 25…\n$ Alcohol_consumption    &lt;dbl&gt; 0, 3, 0, 5, 3, 0, 0, 0, 3, 0, 0, 0, 0, 1, 2, 2,…\n$ Smoking_status         &lt;int&gt; 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1,…\n$ Exercise_frequency     &lt;dbl&gt; 3, 3, 3, 1, 3, 1, 3, 1, 0, 3, 3, 1, 3, 0, 5, 0,…\n\n\nSummary Statistics\nNext, we examined the summary statistics to understand our data further. The average age across the participants is 41 years old, ranging from the youngest at 9 years to the oldest at 69 years old. The average sleep efficiency is 79%, slightly below the National Sleep Foundation (NSF) recommended level at 85%. On average, the participants wake up 1 to 2 times throughout the night. Additionally, exercise frequency is relatively low, typically occurring once or twice a week. On average, participants consume a relatively low amount of caffeine and alcohol, about 23 mg and 1.2 oz respectively. Summary statistics for binary variables are computed to ensure that their minimum and maximum value are 0 and 1 respectively.\n\nsleep_clean|&gt;\n  sdf_describe()\n\n# Source: spark&lt;?&gt; [?? x 15]\n  summary Age         Gender Bedtime Wakeup_time Sleep_duration Sleep_efficiency\n  &lt;chr&gt;   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;       &lt;chr&gt;          &lt;chr&gt;           \n1 count   386         386    386     386         386            386             \n2 mean    40.9715025… 0.497… 10.601… 6.89637305… 7.45077720207… 0.7902849740932…\n3 stddev  13.2919941… 0.500… 10.549… 2.00768324… 0.88503395905… 0.1352925512472…\n4 min     9           0      0       3           5.0            0.5             \n5 max     69          1      23      12          10.0           0.99            \n# ℹ 8 more variables: REM_sleep_percentage &lt;chr&gt;, Deep_sleep_percentage &lt;chr&gt;,\n#   Light_sleep_percentage &lt;chr&gt;, Awakenings &lt;chr&gt;, Caffeine_consumption &lt;chr&gt;,\n#   Alcohol_consumption &lt;chr&gt;, Smoking_status &lt;chr&gt;, Exercise_frequency &lt;chr&gt;\n\n\n2. Exploratory Data Analysis and Visualization\nIn this section, we performed exploratory data analysis to analyse and identify trends amongst our variables.\nHistogram Frequency plot\nFirstly, we explored 14 variables in the dataset by generating histograms to understand their distribution. From our frequency plots, we can draw the following insights:\n\nSleep efficiency is relatively high ranging between 0.8 to 0.9.\nAge of the participants is concentrated around 25 to 50 years old.\nThe number of males and females in the dataset appears to be relatively balanced.\nMost of the participants experience 7 to 8 hours of sleep per night.\nThe majority of the participants exercise 0 or 3 times a week.\nThe contrasting patterns of Deep_sleep_percentage and Light_sleep_percentage suggest a potentially high correlation between the two variables.\nThe majority of the participants woke up 0 or 1 time throughout the night which could explain the relatively high sleep efficiency.\nThe distribution of Caffeine_consumption is skewed to the right, suggesting that most participants consumed little to no caffeine.\nAlcohol consumption is relatively low as the majority appears to consume 0 oz throughout the day.\n\n\nsleep_clean_df &lt;- sleep_clean |&gt;\n                  collect() \n  \nfor (col in names(sleep_clean_df)){\n  graphs &lt;- ggplot(sleep_clean_df, aes_string(x = col)) + \n    geom_histogram(binwidth = 0.15, fill = \"skyblue\", color = \"black\")+\n    labs(title = paste(\"Histogram of\", col), x = col, y = \"Frequency\")\n  \n  print(graphs)\n}\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCorrelation plot\nFrom the correlation plot, Deep_sleep_percentage has the highest correlation with light_sleep_percentage with a correlation coefficient of -0.99. Awakenings has a negative relationship with sleep_efficiency with a correlation coefficient of -0.57, suggesting that as the frequency of awakenings increases, sleep efficiency decreases. Additionally, Deep_sleep_percentage appears to have a strong positive correlation with sleep_efficiency while Light_sleep_percentage has a strong negative correlation with sleep_efficiency.\n\nsleep_corr &lt;- sleep_clean |&gt;\n            correlate(use = \"pairwise.complete.obs\", method = \"pearson\") |&gt;\n            shave(upper = TRUE) |&gt;\n            rplot(print_cor = TRUE) +\n            scale_x_discrete(guide = guide_axis(angle = 45))\n\nNew names:\nCorrelation method: 'pearson' Missing treated using: 'pairwise.complete.obs'\n• `` -&gt; `...1`\n• `` -&gt; `...2`\n• `` -&gt; `...3`\n• `` -&gt; `...4`\n• `` -&gt; `...5`\n• `` -&gt; `...6`\n• `` -&gt; `...7`\n• `` -&gt; `...8`\n• `` -&gt; `...9`\n• `` -&gt; `...10`\n• `` -&gt; `...11`\n• `` -&gt; `...12`\n• `` -&gt; `...13`\n• `` -&gt; `...14`\n\nsleep_corr\n\n\n\n\n\ngrouped_sleep1 &lt;- sleep_clean |&gt;\n                   mutate(Alcohol_status = ifelse(Alcohol_consumption %in% c(1,2,3,4,5),1,0))|&gt;\n                   group_by(Alcohol_status, Smoking_status)|&gt;\n                   summarise(n = n())|&gt;\n                   group_by(Alcohol_status)|&gt;\n                   summarize(count = sum(n), prop = sum(Smoking_status * n) / sum(n))|&gt; #prop of those who smoke\n                   collect()\n\n`summarise()` has grouped output by \"Alcohol_status\". You can override using\nthe `.groups` argument.\n\n\nWarning: Missing values are always removed in SQL aggregation functions.\nUse `na.rm = TRUE` to silence this warning\nThis warning is displayed once every 8 hours.\n\n\n`summarise()` has grouped output by \"Alcohol_status\". You can override using\nthe `.groups` argument.\n\ngrouped_sleep1 |&gt; \n  mutate(Alcohol_status = as.factor(Alcohol_status))|&gt;\n  ggplot(aes(x = Alcohol_status, y = prop))+\n  geom_col(width = 0.3)+\n  labs(title = \"Proportion of smokers who consume alcohol\")+\n  xlab(\"Alcohol consumption status\")+\n  ylab(\"Proportion\")\n\n\n\n\nChi-square test for independence for Alcohol consumption and Smoking status\nThe above plot plot shows that Alcohol_consumption and Smoking_status do not seem to correlate with each other as there is no significant difference between the proportion of smokers who do and do not consume alcohol. Hence, this motivates the use of the chi-square test for independence. Since p-value = 0.5436 &gt; 0.05, we do not reject the null hypothesis at the 5% level of significance and conclude that there is sufficient evidence that smoking status and alcohol consumption are independent.\n\ncontingency_table &lt;- sleep_clean|&gt;\n                     mutate(Alcohol_status = as.integer(ifelse(Alcohol_consumption %in% c(1,2,3,4,5),1,0)))|&gt;\n                     sdf_crosstab(\"Smoking_status\", \"Alcohol_status\")|&gt;\n                     collect()|&gt;\n                     sapply(as.numeric)|&gt;\n                     as.matrix()\n\ncontingency_matrix &lt;- matrix(c(60,111,60,94), nrow = 2)\nchisq.test(contingency_matrix)\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  contingency_matrix\nX-squared = 0.36889, df = 1, p-value = 0.5436\n\n\nRelationship between Average sleep efficiency and Smoking status\nThis plot shows the 95% confidence interval of average sleep efficiency for smokers and non-smokers respectively. The dashed line represents the average sleep efficiency (about 0.79) of all the participants regardless of their smoking status. Compared to their smoking counterparts, non-smokers experience a higher sleep efficiency of 0.82 as opposed to 0.72. Furthermore, their sleep efficiency is higher than the overall average. Hence, smoking does have an effect on sleep efficiency.\n\nsmoke_prop_data &lt;- sleep_clean |&gt;\n                   group_by(Smoking_status) |&gt;\n                   summarise(\n                      avg_sleep_efficiency = mean(Sleep_efficiency, na.rm = TRUE),\n                      sd_sleep_efficiency = sd(Sleep_efficiency, na.rm = TRUE),\n                      n = n()) |&gt;\n                   mutate(se = sd_sleep_efficiency/sqrt(n)) |&gt;\n                    collect()\n\naverage_sleep_eff_df &lt;- sleep_clean |&gt;\n                        summarise(avg_sleep_efficiency = mean(Sleep_efficiency))|&gt;\n                        collect()\n\naverage_sleep_eff_vec &lt;- average_sleep_eff_df$avg_sleep_efficiency\n\n#plotting relationship between smoking status and sleep efficiency\nsmoke_prop_data |&gt;\n  mutate(Smoking_status = as.factor(Smoking_status))|&gt;\n  ggplot(aes(x = Smoking_status, y = avg_sleep_efficiency))+\n  geom_point(size = 2)+\n  geom_errorbar(aes(ymin = avg_sleep_efficiency - 1.96*se,\n                    ymax = avg_sleep_efficiency + 1.96*se),\n                    width = 0.1) +\n  geom_hline(yintercept = average_sleep_eff_vec, linetype = \"dashed\")+\n  labs(title = \"Average sleep efficiency based on smoking status\")+\n  ylab(\"Average sleep efficiency\")+\n  xlab(\"Smoking status\")\n\n\n\n\nRelationship between Average sleep efficiency and Gender\nSimilarly, the interval plot shows the 95% confidence interval for average sleep efficiency of both male and female. Dashed line represents the average sleep efficiency regardless of gender. Females experience a slightly higher sleep quality as compared to males, and the overall average. However, there is no significant difference in average sleep efficiency between the two groups. Hence gender does not affect sleep efficiency.\n\ngender_prop_data &lt;- sleep_clean |&gt;\n                    group_by(Gender) |&gt;\n                    summarise(avg_sleep_efficiency = mean(Sleep_efficiency),\n                              sd_sleep_efficiency = sd(Sleep_efficiency),\n                              n = n())|&gt;\n                    mutate(se = sd_sleep_efficiency/sqrt(n)) |&gt;\n                    collect()\n\ngender_prop_data |&gt;\n  mutate(Gender = as.factor(Gender)) |&gt;\n  ggplot(aes(x = Gender, y = avg_sleep_efficiency))+\n  geom_point(size = 2)+\n  geom_errorbar(aes(ymin = avg_sleep_efficiency - 1.96*se,\n                    ymax = avg_sleep_efficiency + 1.96*se),\n                    width = 0.1) +\n  geom_hline(yintercept = average_sleep_eff_vec, linetype = \"dashed\")+\n  labs(title = \"Average sleep efficiency based on gender\")+\n  ylab(\"Average sleep efficiency\")+\n  xlab(\"Gender\")\n\n\n\n\nRelationship between Age, Sleep duration and Sleep efficiency\nFrom the line graph, participants in their early 30s experienced a significant drop in sleep efficiency, despite having the second longest sleeping duration across all age groups. This suggests that they might have trouble falling asleep which implies that they spend more time awake while in bed. Therefore, a longer sleep duration does not necessarily lead to a higher sleep efficiency.\n\ngrouped_sleep2 &lt;- sleep_clean |&gt; \n                  group_by(Age) |&gt;\n                  summarise(avg_sleep_efficiency = mean(Sleep_efficiency))|&gt;\n                  collect() \ngrouped_sleep2 |&gt;\n  ggplot(aes(x = Age, y = avg_sleep_efficiency)) +\n  geom_line()+\n  labs(title = \"Average sleep efficiency by age\")+\n  ylab(\"Average sleep efficiency\")+\n  xlab(\"Age\")+\n  coord_cartesian(ylim = c(0.4, 1))\n\n\n\n\n\ngrouped_sleep3 &lt;- sleep_clean |&gt; \n                group_by(Age) |&gt;\n                summarise(avg_sleep_duration = mean(Sleep_duration))|&gt;\n                collect() \ngrouped_sleep3 |&gt;\n  ggplot(aes(x = Age, y = avg_sleep_duration)) +\n  geom_line()+\n  labs(title = \"Average sleep duration by age\")+\n  ylab(\"Average sleep duration\")+\n  xlab(\"Age\")\n\n\n\n\nRelationship between Sleep efficiency and Awakenings\nFrom the box plot, sleep efficiency is the highest when participants did not wake up during the night. The average sleep efficiency is 0.92, surpassing the NSF’s recommended value of 0.85. Sleep efficiency is approximately 0.7 for individuals who woke up 2, 3 or 4 times during the night. This indicates that Awakenings might be useful to predict sleep efficiency for individuals experiencing less disrupted sleep.\n\nsleep_clean |&gt;\n  ggplot(aes(x = as.factor(Awakenings), y = Sleep_efficiency)) +\n  geom_boxplot() +\n  xlab(\"Awakenings\") +\n  ylab(\"Sleep efficiency\")\n\n\n\n\nRelationship between Sleep efficiency and Caffeine consumption\nOne can experience varying levels of sleep efficiency even when 0 mg of caffeine is consumed. As shown in the raster plot, there are outliers that show that sleep efficiency can be as high as 0.9 even when a high dose of caffeine is consumed. Hence, caffeine consumption might not be a significant variable. Moreover, the box plot shows that caffeine consumption does not seem to affect Awakenings as well. This suggests that caffeine might not necessarily affect sleep efficiency in this context. Nonetheless, if a larger sample size or additional information about the timing of caffeine consumption were available, it might provide a clearer understanding of this relationship.\n\nsleep_clean |&gt;\n  dbplot_raster(x = Caffeine_consumption, y = Sleep_efficiency, fill = n(), resolution = 10)\n\n\n\n\n\ngrouped_sleep4 &lt;- sleep_clean |&gt;\n                  group_by(Awakenings)|&gt;\n                  summarise(Caffeine_consumption_percentile = percentile(Caffeine_consumption, array(0.25,0.5,0.75)))|&gt;\n                  mutate(Caffeine_consumption_percentile = explode(Caffeine_consumption_percentile))|&gt;\n                  collect()\n\ngrouped_sleep4 |&gt;\n  mutate(Awakenings = as.factor(Awakenings))|&gt;\n  ggplot(aes(x = Awakenings, y = Caffeine_consumption_percentile))+\n  geom_boxplot()+\n  labs(title = \"The effects of Caffeine consumption on Awakenings\")+\n  ylab(\"Caffeine consumption\")+\n  xlab(\"Awakenings\")\n\n\n\n\nRelationship between Sleep efficiency and Alcohol consumption\nThe interval plot shows the 95% confidence interval for average sleep efficiency based on the alcohol consumption level. In general, an increase in alcohol consumption generally results in decreased sleep efficiency.\n\nalcohol_prop_data &lt;- sleep_clean |&gt;\n  group_by(Alcohol_consumption) |&gt;\n  summarise(\n    avg_sleep_efficiency = mean(Sleep_efficiency, na.rm = TRUE),\n    sd_sleep_efficiency = sd(Sleep_efficiency, na.rm = TRUE),\n    n = n()\n  ) |&gt;\n  mutate(se = sd_sleep_efficiency/sqrt(n)) |&gt;\n  arrange(Alcohol_consumption) |&gt;\n  collect()\n\nalcohol_prop_data |&gt;\n  ggplot(aes(x = Alcohol_consumption, y = avg_sleep_efficiency))+\n  geom_point(size = 2)+\n  geom_errorbar(aes(ymin = avg_sleep_efficiency - 1.96*se,\n                    ymax = avg_sleep_efficiency + 1.96*se),\n                    width = 0.1) +\n  geom_hline(yintercept = average_sleep_eff_vec, linetype = \"dashed\")+\n  labs(title = \"Average sleep efficiency based alcohol consumption\")+\n  ylab(\"Average sleep efficiency\")+\n  xlab(\"Alcohol consumption (in oz)\")\n\n\n\n\nRelationship between Sleep efficiency and Exercise frequency\nThe interval plot shows the 95% confidence interval for average sleep efficiency based on the exercise frequency. We can observe that exercising generally improves sleep efficiency, but the benefits of exercising more than once a week is hard to discern because the confidence intervals for frequencies 1 to 5 all overlap the average sleep efficiency level.\n\nexercise_prop_data &lt;- sleep_clean |&gt;\n                    group_by(Exercise_frequency) |&gt;\n                    summarise(avg_sleep_efficiency = mean(Sleep_efficiency),\n                              sd_sleep_efficiency = sd(Sleep_efficiency),\n                              n = n())|&gt;\n                    mutate(se = sd_sleep_efficiency/sqrt(n)) |&gt;\n                    arrange(Exercise_frequency) |&gt;\n                    collect()\n\n#plotting relationship between exercise and sleep efficiency\nexercise_prop_data |&gt;\n  ggplot(aes(x = Exercise_frequency, y = avg_sleep_efficiency))+\n  geom_point(size = 2)+\n  geom_errorbar(aes(ymin = avg_sleep_efficiency - 1.96*se,\n                    ymax = avg_sleep_efficiency + 1.96*se),\n                    width = 0.1) +\n  geom_hline(yintercept = average_sleep_eff_vec, linetype = \"dashed\")+\n  labs(title = \"Average sleep efficiency based on exercise\")+\n  ylab(\"Average sleep efficiency\")+\n  xlab(\"Exercise Frequency (per week)\")\n\n\n\n\nRelationship between Bedtime and Sleep efficiency\nThe plot shows the average sleep efficiency across various bedtimes. The size of the points represents the number of individuals who slept at each time. Majority of the participants tend to sleep at either 10pm or 12am. Sleep efficiency is the highest when individuals go to bed at 10pm and starts to drop thereafter.\nUpon closer examination, the plot shows the scatter plots after filtering for cases where sleep efficiency was above average level of 0.79, and sleep duration was at least 7 hours.\n\ngrouped_sleep5 &lt;- sleep_clean |&gt;\n                  group_by(Bedtime)|&gt;\n                  summarise(n = n(), ave_sleep = mean(Sleep_efficiency))|&gt;\n                  arrange(desc(ave_sleep))|&gt;\n                  collect()\n\nbedtime_plot &lt;- grouped_sleep5 |&gt;\n                mutate(Bedtime = as.factor(Bedtime)) |&gt;\n                ggplot(aes(x=Bedtime, y=ave_sleep))+\n                geom_point(aes(size = n))+\n                labs(title = \"The effects of Bedtime on Sleep efficiency\")+\n                ylab(\"Average sleep efficiency\")+\n                xlab(\"Bedtime in 24 Hours\")+\n                theme_minimal()\nggplotly(bedtime_plot)\n\n\n\n\n\n\ngrouped_sleep6 &lt;- sleep_clean |&gt;\n                  group_by(Bedtime, Sleep_duration)|&gt;\n                  summarise(n = n(), ave_sleep = mean(Sleep_efficiency))|&gt;\n                  arrange(desc(ave_sleep))|&gt;\n                  filter(ave_sleep&gt;0.79 & Sleep_duration&gt;6) |&gt;\n                  collect()\n\n`summarise()` has grouped output by \"Bedtime\". You can override using the\n`.groups` argument.\n\nbedtime_plot &lt;- grouped_sleep6 |&gt;\n                mutate(Bedtime = as.factor(Bedtime)) |&gt;\n                ggplot(aes(x=Bedtime, y=ave_sleep))+\n                geom_point(aes(size = n))+\n                geom_point(aes(colour= Sleep_duration))+\n                labs(title = \"The effects of Bedtime on Sleep efficiency\")+\n                ylab(\"Average sleep efficiency\")+\n                xlab(\"Bedtime in 24 Hours\")+\n                theme_minimal()\nggplotly(bedtime_plot)\n\n\n\n\n\n3. Data Modelling in Spark\nIn this section, we aim to use machine learning models to conduct predictive modelling. We used multiple linear regression to predict sleep efficiency. The first model includes all the variables except for Bedtime and Wakeup_time to avoid perfect collinearity problem as they have a linear relationship with Sleep_duration. In the second model, Deep_sleep_percentage is removed to avoid multicollinearity as it is highly correlated with Light_sleep_percentage. Additionally, our visualisations have shown that Gender, Sleep_duration and Caffeine_consumption does not affect sleep efficiency. Moreover, given that their p-value in the first regression is more than 0.05, it suggests that they are not statistically significant. Hence they are excluded from our second model. Lastly, the third model is the same as the second model but includes Caffeine_consumption.\n\nsleep_split &lt;- sleep_clean |&gt;\n               sdf_random_split(training = 0.8,\n                                testing = 0.2,\n                                seed = 1337)\n\nsleep_train &lt;- sleep_split$training\nsleep_test &lt;- sleep_split$testing\n\n\nml1 &lt;- sleep_train |&gt; \n       ml_linear_regression(formula = Sleep_efficiency ~ . -Bedtime -Wakeup_time)|&gt;\n        tidy()\nml1\n\n# A tibble: 12 × 5\n   term                    estimate std.error statistic  p.value\n   &lt;chr&gt;                      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)             0.811     0.148        5.49  8.12e- 8\n 2 Age                     0.000611  0.000265     2.30  2.19e- 2\n 3 Gender                  0.00247   0.00753      0.328 7.43e- 1\n 4 Sleep_duration         -0.000614  0.00372     -0.165 8.69e- 1\n 5 REM_sleep_percentage    0.00410   0.00105      3.91  1.15e- 4\n 6 Deep_sleep_percentage   0.000852  0.00163      0.523 6.01e- 1\n 7 Light_sleep_percentage -0.00482   0.00169     -2.86  4.49e- 3\n 8 Awakenings             -0.0307    0.00267    -11.5   0       \n 9 Caffeine_consumption    0.000145  0.000129     1.12  2.63e- 1\n10 Alcohol_consumption    -0.00723   0.00227     -3.18  1.62e- 3\n11 Smoking_status         -0.0472    0.00725     -6.51  2.96e-10\n12 Exercise_frequency      0.00568   0.00250      2.27  2.38e- 2\n\n\n\nml2 &lt;- sleep_train |&gt; \n       ml_linear_regression(formula = Sleep_efficiency ~ . -Bedtime -Wakeup_time-Gender-Sleep_duration-Deep_sleep_percentage-Caffeine_consumption)|&gt;\n       tidy()\nml2\n\n# A tibble: 8 × 5\n  term                    estimate std.error statistic  p.value\n  &lt;chr&gt;                      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)             0.884     0.0241       36.7  0       \n2 Age                     0.000531  0.000248      2.14 3.32e- 2\n3 REM_sleep_percentage    0.00406   0.000865      4.69 4.07e- 6\n4 Light_sleep_percentage -0.00567   0.000262    -21.7  0       \n5 Awakenings             -0.0312    0.00260     -12.0  0       \n6 Alcohol_consumption    -0.00753   0.00225      -3.34 9.31e- 4\n7 Smoking_status         -0.0475    0.00711      -6.68 1.05e-10\n8 Exercise_frequency      0.00490   0.00236       2.07 3.88e- 2\n\n\n\nml3 &lt;- sleep_train |&gt; \n       ml_linear_regression(formula = Sleep_efficiency ~ . -Bedtime -Wakeup_time-Gender-Sleep_duration-Deep_sleep_percentage)|&gt;\n       tidy()\n\nml3\n\n# A tibble: 9 × 5\n  term                    estimate std.error statistic  p.value\n  &lt;chr&gt;                      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)             0.883     0.0241       36.6  0       \n2 Age                     0.000568  0.000250      2.27 2.36e- 2\n3 REM_sleep_percentage    0.00383   0.000883      4.34 1.96e- 5\n4 Light_sleep_percentage -0.00570   0.000262    -21.7  0       \n5 Awakenings             -0.0307    0.00263     -11.7  0       \n6 Caffeine_consumption    0.000157  0.000125      1.26 2.09e- 1\n7 Alcohol_consumption    -0.00722   0.00226      -3.19 1.57e- 3\n8 Smoking_status         -0.0472    0.00710      -6.65 1.29e-10\n9 Exercise_frequency      0.00534   0.00239       2.24 2.59e- 2\n\n\n10-Fold Cross-Validation\nTo find the best model, we employed a 10-fold cross-validation by using ml_cross_validator() to compare their Root Mean Squared Error (RMSE). The parameters of elastic_net_param and reg_param are set to zero to perform the least squares. (Ridge regression without penalty). From the RMSE plot, it shows that the RMSE for Model 2 is the lowest (0.05933). Nonetheless, Model 3 with added the variable: caffeine_consumption, is still chosen to be the best model to predict sleep efficiency. As this plot employs ggplot(), it is important to note that the axes are automatically scaled and the difference in RMSE between the models differ slightly in absolute terms despite the huge drop reflected in the line graph.\nDespite the slight increase in Model 3’s RMSE, we still chose to include caffeine_consumption in our final model. The prevalence of tea drinking as part of Moroccan culture explains the relatively low amount of caffeine consumed (about 23 mg) per person. However, it is still an important variable to predict sleep efficiency for individuals outside Morocco, where higher levels of caffeine consumption is more prevalent.\n\npipeline1 &lt;- ml_pipeline(sc) |&gt;\n             ft_r_formula(formula = Sleep_efficiency ~ . -Bedtime -Wakeup_time)|&gt; \n             ml_linear_regression()\n\ngrid &lt;- list(linear_regression = list(elastic_net_param = 0, reg_param = 0))\n\ncv &lt;- ml_cross_validator(\n  sc,\n  estimator = pipeline1,\n  evaluator = ml_regression_evaluator(\n              sc, \n              label_col = \"Sleep_efficiency\"),\n  estimator_param_maps = grid,\n  num_folds = 10,\n  parallelism = 1,\n  seed = 1337\n)\n\npipeline_model1 &lt;- ml_fit(cv,sleep_train)\nrmse1 &lt;- ml_validation_metrics(pipeline_model1);rmse1\n\n        rmse reg_param_1 elastic_net_param_1\n1 0.05987477           0                   0\n\n\n\npipeline2 &lt;- ml_pipeline(sc) |&gt;\n             ft_r_formula(formula = Sleep_efficiency ~ . -Bedtime -Wakeup_time-Gender-Sleep_duration-Deep_sleep_percentage-Caffeine_consumption)|&gt; \n             ml_linear_regression()\n\ngrid &lt;- list(linear_regression = list(elastic_net_param = 0, reg_param = 0))\n\ncv &lt;- ml_cross_validator(\n  sc,\n  estimator = pipeline2,\n  evaluator = ml_regression_evaluator(\n              sc, \n              label_col = \"Sleep_efficiency\"),\n  estimator_param_maps = grid,\n  num_folds = 10,\n  parallelism = 1,\n  seed = 1337\n)\n\npipeline_model2 &lt;- ml_fit(cv,sleep_train)\nrmse2 &lt;- ml_validation_metrics(pipeline_model2);rmse2\n\n        rmse reg_param_1 elastic_net_param_1\n1 0.05933476           0                   0\n\n\n\npipeline3 &lt;- ml_pipeline(sc) |&gt;\n             ft_r_formula(formula = Sleep_efficiency ~ . -Bedtime -Wakeup_time-Gender-Sleep_duration-Deep_sleep_percentage)|&gt; \n             ml_linear_regression()\n\ngrid &lt;- list(linear_regression = list(elastic_net_param = 0, reg_param = 0))\n\ncv &lt;- ml_cross_validator(\n  sc,\n  estimator = pipeline3,\n  evaluator = ml_regression_evaluator(\n              sc, \n              label_col = \"Sleep_efficiency\"),\n  estimator_param_maps = grid,\n  num_folds = 10,\n  parallelism = 1,\n  seed = 1337\n)\n\npipeline_model3 &lt;- ml_fit(cv,sleep_train)\nrmse3 &lt;- ml_validation_metrics(pipeline_model3);rmse3\n\n        rmse elastic_net_param_1 reg_param_1\n1 0.05943701                   0           0\n\n\n\nrmse_df &lt;- data.frame(model = c(1,2,3), \n                      rmse = c(rmse1$rmse,rmse2$rmse,rmse3$rmse)) |&gt;\n           mutate(model = as.factor(model))\n\nrmse_plot &lt;- rmse_df |&gt;\n            ggplot(aes(x = model, y = rmse, group = 1)) +\n            geom_point() +  \n            geom_line(color = \"deepskyblue\") + \n            geom_text(aes(label = round(rmse,5)), vjust = -0.5)+\n            ylim(0.058, 0.06)+\n            labs(title = \"Plot of RMSE by Model\", x = \"Model\", y = \"RMSE\")  \n\nrmse_plot\n\n\n\n\n4. Spark ML pipeline\nImproving Model 3 by tuning its hyperparameters\nFinal model after hyperparameter tuning:\nSleep_efficiency = 0.757 + 0.00757 Age + 0.0147 REM_sleep_percentage -0.0861 Light_sleep_percentage -0.0422 Awakenings + 0.0043 Caffeine_consumption -0.0128 Alcohol_consumption + 0.0472 Smoking_status + 0.0080 Exercise_frequency\nFirstly, a pipeline of 6 stages is created. All numerical variables in Model 3 are standardised with mean equals to 0 and standard deviation equals to 1. Next, Smoking_status is indexed and encoded. Finally, all variables go through the ml_linear_regression() stage. The pipeline was created using a for-loop, as we have treated our dataset as if it were big data with more variables. In reality, there could be more categorical variables in the regression to be indexed and encoded. Therefore, this is a more efficient approach and improves the readability of the pipeline.\n\nall_str_variables &lt;- sleep |&gt; \n                     select_if(is.character)|&gt;\n                     names()\n\nall_variables_ml3 &lt;- ml3$term[-1]\nstr_variables_ml3 &lt;- intersect(all_str_variables, all_variables_ml3)\nnum_variables_ml3 &lt;- setdiff(all_variables_ml3, str_variables_ml3)\n\n\npipeline &lt;- ml_pipeline(sc) |&gt;\n            ft_vector_assembler(input_col = num_variables_ml3,\n                                output_col = \"features\") |&gt;\n            ft_standard_scaler(input_col = \"features\",\n                               output_col = \"stdz_features\",\n                               with_mean = TRUE) \n\nencoder_input_vec &lt;- c()\nfor (variable in str_variables_ml3) {\n  output_col &lt;- paste0(variable, \"_indexed\")\n  pipeline &lt;- pipeline |&gt;\n                        ft_string_indexer(\n                        input_col = variable, \n                        output_col = paste0(variable, \"_indexed\")) \n  encoder_input_vec &lt;- c(encoder_input_vec, output_col)\n}\n\n\nencoder_output_vec &lt;- c()\nfor (variable in encoder_input_vec) {\n  output_col &lt;- paste0(sub(\"_indexed\", \"\", variable), \"_encoded\")\n  pipeline &lt;- pipeline |&gt;\n                        ft_one_hot_encoder(\n                        input_cols = variable, \n                        output_col = paste0(sub(\"_indexed\", \"\", variable), \"_encoded\"))\n  encoder_output_vec &lt;- c(encoder_output_vec , output_col)\n}\n\ninput_vector &lt;- c(\"stdz_features\", encoder_output_vec)\n\npipeline &lt;- pipeline |&gt;\n            ft_vector_assembler(\n            input_cols =  input_vector, \n            output_col = \"final_features\") |&gt;\n            \n            ml_linear_regression(\n            features_col = \"final_features\", \n            label_col = \"Sleep_efficiency\")\n\nThen, cross validation with different combinations of elastic_net_param from values 0 to 1 is employed. The initial value for reg_param starts from 0.001 instead of 0 because it gives us a model with a lower RMSE. Finally, the improved model has a slightly lower RMSE of 0.05939 with the following hyperparameters – elastic_net_param_1 = 0 and reg_param_1 = 0.00289.\n\nncores &lt;- detectCores(logical = FALSE)\ngrid &lt;- list(\n        linear_regression = list(\n        elastic_net_param = seq(from = 0, to = 1, length = 11), \n        reg_param = seq(from = 0.001, to = 0.01, length = 20)))\n\ncv &lt;- ml_cross_validator(\n  sc,\n  estimator = pipeline,\n  estimator_param_maps = grid,\n  evaluator = ml_regression_evaluator(sc, \n                                      label_col = \"Sleep_efficiency\"),\n  num_folds = 10,\n  parallelism = ncores,\n  seed = 1337\n)\n\n\ncv_model &lt;- ml_fit(cv,sleep_train);cv_model\n\nCrossValidatorModel (Transformer)\n&lt;cross_validator__de058fc5_a302_4604_9e25_7c466b836d9c&gt; \n (Parameters -- Tuning)\n  estimator: Pipeline\n             &lt;pipeline__89600ec1_cf63_4de2_9b62_a5ee1b54610e&gt; \n  evaluator: RegressionEvaluator\n             &lt;regression_evaluator__312a4dcb_0e1e_4621_a46c_cedd6fc9821b&gt; \n    with metric rmse \n  num_folds: 10 \n  [Tuned over 220 hyperparameter sets]\n (Best Model)\n  PipelineModel (Transformer) with 6 stages\n  &lt;pipeline__89600ec1_cf63_4de2_9b62_a5ee1b54610e&gt; \n    Stages \n    |--1 VectorAssembler (Transformer)\n    |    &lt;vector_assembler__dc637456_1dad_4839_a9bb_c9d7b05a8b53&gt; \n    |     (Parameters -- Column Names)\n    |      input_cols: Age, REM_sleep_percentage, Light_sleep_percentage, Awakenings, Caffeine_consumption, Alcohol_consumption, Exercise_frequency\n    |      output_col: features\n    |--2 StandardScalerModel (Transformer)\n    |    &lt;standard_scaler__70e92643_d090_4997_b652_95a46b41964a&gt; \n    |     (Parameters -- Column Names)\n    |      input_col: features\n    |      output_col: stdz_features\n    |     (Transformer Info)\n    |      mean:  num [1:7] 41.1 22.98 25.08 1.66 22.31 ... \n    |      std:  num [1:7] 13.39 3.9 15.49 1.39 28.03 ... \n    |--3 StringIndexerModel (Transformer)\n    |    &lt;string_indexer__d11e90e3_92af_4714_91ac_2992f74fb923&gt; \n    |     (Parameters -- Column Names)\n    |      input_col: Smoking_status\n    |      output_col: Smoking_status_indexed\n    |     (Transformer Info)\n    |      labels:  chr [1:2] \"0\" \"1\" \n    |--4 OneHotEncoderModel (Transformer)\n    |    &lt;one_hot_encoder__41bbd743_a79b_45bd_a424_9079990b292f&gt; \n    |     (Parameters -- Column Names)\n    |      input_cols: Smoking_status_indexed\n    |      output_col: one_hot_encoder__41bbd743_a79b_45bd_a424_9079990b292f__output\n    |      output_cols: Smoking_status_encoded\n    |     (Transformer Info)\n    |      category_sizes:  int 2 \n    |--5 VectorAssembler (Transformer)\n    |    &lt;vector_assembler__fcb97d87_f2dd_48c5_b6c8_f0046e5b859e&gt; \n    |     (Parameters -- Column Names)\n    |      input_cols: stdz_features, Smoking_status_encoded\n    |      output_col: final_features\n    |--6 LinearRegressionModel (Transformer)\n    |    &lt;linear_regression__a78e9a1b_2d71_4828_b5b0_69d3bffa66eb&gt; \n    |     (Parameters -- Column Names)\n    |      features_col: final_features\n    |      label_col: Sleep_efficiency\n    |      prediction_col: prediction\n    |     (Transformer Info)\n    |      coefficients:  num [1:8] 0.0075 0.01438 -0.08611 -0.04219 0.00438 ... \n    |      intercept:  num 0.757 \n    |      num_features:  int 8 \n    |      scale:  num 1 \n\n\n\nml_validation_metrics(cv_model) |&gt;\n              arrange(rmse)|&gt;\n              head(3)\n\n        rmse elastic_net_param_1 reg_param_1\n1 0.05939788                   0 0.002894737\n2 0.05939823                   0 0.003368421\n3 0.05939934                   0 0.002421053\n\n\n\nml_stage(cv_model$best_model, stage = \"linear_regression\")\n\nLinearRegressionModel (Transformer)\n&lt;linear_regression__a78e9a1b_2d71_4828_b5b0_69d3bffa66eb&gt; \n (Parameters -- Column Names)\n  features_col: final_features\n  label_col: Sleep_efficiency\n  prediction_col: prediction\n (Transformer Info)\n  coefficients:  num [1:8] 0.0075 0.01438 -0.08611 -0.04219 0.00438 ... \n  intercept:  num 0.757 \n  num_features:  int 8 \n  scale:  num 1 \n\nbestmodel_coeff &lt;- ml_stage(cv_model$best_model, stage = \"linear_regression\")$coefficients\nbestmodel_coeff\n\n[1]  0.007503705  0.014378519 -0.086109289 -0.042190082  0.004375454\n[6] -0.012812382  0.008021552  0.047199543\n\n\n\npredictions &lt;- ml_transform(cv_model, sleep_test)|&gt;\n               collect()\n\nWarning in arrow_enabled_object.spark_jobj(sdf): Arrow disabled due to columns:\nfeatures, stdz_features, Smoking_status_encoded, final_features\n\nglimpse(predictions)\n\nRows: 61\nColumns: 20\n$ Age                    &lt;int&gt; 18, 21, 22, 22, 23, 24, 24, 24, 25, 27, 27, 27,…\n$ Gender                 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1,…\n$ Bedtime                &lt;int&gt; 0, 0, 21, 23, 23, 0, 0, 2, 22, 23, 23, 0, 1, 21…\n$ Wakeup_time            &lt;int&gt; 8, 9, 3, 6, 7, 7, 9, 8, 6, 6, 7, 7, 8, 4, 4, 5,…\n$ Sleep_duration         &lt;dbl&gt; 8.0, 8.5, 6.0, 7.0, 8.0, 7.5, 8.5, 6.0, 8.0, 7.…\n$ Sleep_efficiency       &lt;dbl&gt; 0.68, 0.87, 0.72, 0.91, 0.80, 0.58, 0.88, 0.78,…\n$ REM_sleep_percentage   &lt;int&gt; 20, 26, 27, 25, 15, 24, 26, 26, 28, 24, 25, 28,…\n$ Deep_sleep_percentage  &lt;int&gt; 30, 63, 55, 65, 65, 28, 63, 60, 57, 25, 20, 60,…\n$ Light_sleep_percentage &lt;int&gt; 48, 18, 18, 17, 15, 53, 18, 16, 21, 52, 55, 17,…\n$ Awakenings             &lt;int&gt; 3, 0, 1, 1, 4, 1, 0, 1, 2, 3, 3, 1, 3, 2, 2, 1,…\n$ Caffeine_consumption   &lt;dbl&gt; 25, 50, 0, 75, 75, 0, 50, 0, 25, 75, 0, 50, 25,…\n$ Alcohol_consumption    &lt;dbl&gt; 2, 0, 5, 1, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0,…\n$ Smoking_status         &lt;int&gt; 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1,…\n$ Exercise_frequency     &lt;dbl&gt; 0, 1, 3, 4, 2, 0, 1, 0, 3, 2, 2, 1, 1, 1, 2, 2,…\n$ features               &lt;list&gt; &lt;18, 20, 48, 3, 25, 2, 0&gt;, &lt;21, 26, 18, 0, 50,…\n$ stdz_features          &lt;list&gt; &lt;-1.72550559, -0.76333571, 1.47963540, 0.96541…\n$ Smoking_status_indexed &lt;dbl&gt; 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1,…\n$ Smoking_status_encoded &lt;list&gt; 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0…\n$ final_features         &lt;list&gt; &lt;-1.72550559, -0.76333571, 1.47963540, 0.96541…\n$ prediction             &lt;dbl&gt; 0.5970352, 0.8565372, 0.8423357, 0.8885480, 0.7…\n\n\nPredict sleep efficiency on the test set using the best model after hyperparameter tuning. This plot shows the actual against predicted sleep efficiency. The model performs relatively well in predicting individuals with sleep efficiency between 0.85 to 0.90.\n\npredictions |&gt; \n  ggplot(aes(x = prediction, y = Sleep_efficiency)) +\n  geom_point(color = \"deepskyblue4\", size = 2) +\n  geom_abline(color = \"deepskyblue2\", linetype = \"dashed\") +\n  labs(\n    x = \"Predicted sleep efficiency\",\n    y = \"Actual sleep efficiency\",\n    title = \"Predicted vs Actual sleep efficiency\"\n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Portfolio",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]